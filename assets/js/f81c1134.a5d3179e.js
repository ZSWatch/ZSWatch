"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"progress-hw-xip-usb-power","metadata":{"permalink":"/blog/progress-hw-xip-usb-power","source":"@site/blog/2025-10-10-progress-hw-xip-usb-power/index.md","title":"Power consumption, HW update & Production test","description":"As usual, a lot has landed since our last update, but much of it hasn\u2019t been very visual, so the updates here have been quiet. On hardware, we focused on revision two of the Devkit and the heart\u2011rate test PCB. On software, we optimized power (especially reducing XIP power draw), improved firmware updates over BLE and USB (WebSerial), and added a couple of apps. We also built a dedicated production test application to verify hardware functions during manufacturing. Below is a quick tour, plus a short technical deep\u2011dive on how XIP works on ZSWatch and why it matters for battery life.","date":"2025-10-10T00:00:00.000Z","tags":[{"inline":false,"label":"ZSWatch","permalink":"/blog/tags/zswatch","description":"ZSWatch core"},{"inline":false,"label":"ZSWatch Hardware","permalink":"/blog/tags/zswatch_hardware","description":"ZSWatch hardware core"},{"inline":false,"label":"ZSWatch Software","permalink":"/blog/tags/zswatch_software","description":"ZSWatch software core"}],"readingTime":6.2,"hasTruncateMarker":true,"authors":[{"name":"Jakob Krantz","title":"Senior Software Engineer and ZSWatch Creator and Maintainer","url":"https://jakobkrantz.se","page":{"permalink":"/blog/authors/jakkra"},"socials":{"github":"https://github.com/jakkra","linkedin":"https://www.linkedin.com/in/jakob-krantz-ba9a97127/"},"imageURL":"https://github.com/jakkra.png","key":"jakkra"}],"frontMatter":{"slug":"progress-hw-xip-usb-power","title":"Power consumption, HW update & Production test","authors":["jakkra"],"tags":["zswatch","zswatch_hardware","zswatch_software"]},"unlisted":false,"nextItem":{"title":"Development Kit Prototype","permalink":"/blog/progress-devkit-prototype"}},"content":"import SubscriptionForm from \'@site/src/components/SubscriptionForm\';\\nimport WebsiteShell from \'./website_usb_shell.png\';\\nimport WebsiteFull from \'./website.png\';\\nimport DKRender from \'./dk-1-2-render.png\';\\nimport HRv2 from \'./hr_v2_dk.png\';\\nimport PCBWayLogo from \'./pcbway_logo.svg\';\\n\\nAs usual, a lot has landed since our last update, but much of it hasn\u2019t been very visual, so the updates here have been quiet. On hardware, we focused on revision two of the Devkit and the heart\u2011rate test PCB. On software, we optimized power (especially reducing XIP power draw), improved firmware updates over BLE and USB (WebSerial), and added a couple of apps. We also built a dedicated production test application to verify hardware functions during manufacturing. Below is a quick tour, plus a short technical deep\u2011dive on how XIP works on ZSWatch and why it matters for battery life.\\n\\nLet\u2019s dive into the details...\\n\x3c!-- truncate --\x3e\\n\\n### DevKit v2 ordered (likely final version)\\n\\nLast week we ordered what we believe is the final iteration of the ZSWatch Devkit (#2). We expect to receive it in about three weeks. As a trial for fulfillment, we plan to sell a limited quantity (at least initially) through https://www.elecrow.com. We\u2019ll set up a shop there shortly. Make sure to sign up on the email list to not miss it!\\n\\n<a href={DKRender} target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src={DKRender} alt=\\"ZSWatch Devkit v1.2 render\\" /></a>\\n\\n### Heart Rate board v2\\n\\nWe also received version 2 of the heart\u2011rate test board, and it\u2019s working well. Compared to the v1 prototype from the earlier post ([Health PCB and Firmware Update](/blog/progress-hr-fota)), v2 includes bug fixes and a simplified optical front\u2011end and an extra photodiode:\\n\\n- [Single LED module: OSRAM SFH 7016 (Red, Green, IR)](https://look.ams-osram.com/m/1a73f8d425cfcc40/original/SFH-7016.pdf)\\n- [Two photodiodes: Vishay VEMD8082](https://www.vishay.com/docs/80381/vemd8082.pdf)\\n\\n<a href={HRv2} target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src={HRv2} alt=\\"Heart\u2011Rate test board v2 on Devkit\\" /></a>\\n\\n\\n<div style={{ display: \'flex\', alignItems: \'center\', gap: 16, margin: \'0.25rem 0\' }}>\\n  <a href=\\"https://www.pcbway.com/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\" style={{ display: \'inline-block\', lineHeight: 0 }}>\\n    <PCBWayLogo style={{ width: 220, display: \'block\' }} />\\n  </a>\\n  <div>\\n    A big thanks to PCBWay for sponsoring manufacturing and assembly of our Heart\u2011Rate test PCB. That board uses via\u2011in\u2011pad, which makes fabrication more expensive. As always boards turned out great!\\n  </div>\\n</div>\\n\\n### XIP management and App UI state\\n\\nWe introduced an XIP manager and refined app state handling to safely disable XIP when the screen is off. This reduces baseline current consumption while ensuring apps and UI code don\u2019t crash when XIP is unavailable. Changes included:\\n- Keep app UI code in external flash, but keep app logic in internal flash so it can run while XIP is off.\\n- Add an app \u201cvisible/hidden\u201d state so UI updates don\u2019t run when XIP is disabled.\\n- Careful walkthrough of what can live in external flash and what can\u2019t:\\n  - Since we disable XIP when the screen is off, background code can\u2019t live in external flash anymore.\\n  - `mcumgr` and USB live in XIP as they\u2019re only needed during updates. We explicitly enable them when performing updates in the [update app](https://github.com/ZSWatch/ZSWatch/blob/main/app/src/applications/update/update_app.c).\\n\\nFor apps where the UI code is placed in QSPI flash with XIP, apps now need to guard like [this](https://github.com/ZSWatch/ZSWatch/blob/e3052acf96fc31c813b4050af3b9a3d32d527b26/app/src/applications/stopwatch/stopwatch_app.c#L158):\\n```c\\nstatic void update_elapsed_time(void)\\n{\\n  if (stopwatch_data.state == STOPWATCH_STATE_RUNNING) {\\n      uint64_t current_time = k_uptime_get();\\n      stopwatch_data.elapsed_ms = (uint32_t)(current_time - stopwatch_data.start_time_ms);\\n      \\n      // Only update UI if XIP is enabled and UI is visible\\n      if (app.current_state == ZSW_APP_STATE_UI_VISIBLE) {\\n          stopwatch_ui_update_time(stopwatch_data.elapsed_ms);\\n      }\\n  }\\n}\\n```\\n\\n### New Applications\\n\\n- FFT Spectrum visualizer with an emulated mic driver for the Linux/native build (handy for quick dev and testing).\\n  <video controls src=\\"https://github.com/user-attachments/assets/73f3b879-9343-4f80-ae69-938d120bc3fd\\" style={{width: \'100%\', maxHeight: \'420px\'}} />\\n\\n- Calculator app based on [Zephyr\u2019s SMF sample](https://github.com/zephyrproject-rtos/zephyr/tree/main/samples/subsys/smf/smf_calculator).\\n  <a href=\\"https://github.com/user-attachments/assets/841fbd2e-b997-4f68-b037-094cb0d60fca\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n    <img src=\\"https://github.com/user-attachments/assets/841fbd2e-b997-4f68-b037-094cb0d60fca\\" alt=\\"Calculator app on ZSWatch\\" style={{maxWidth: \'320px\', width: \'100%\'}} />\\n  </a>\\n\\n### Firmware updates over USB and visual overhaul\\n\\nWe now support firmware updates over USB (in addition to BLE) using the browser\u2019s WebSerial API. This means you can also recover a watch that\u2019s stuck or has broken firmware by entering MCUBoot and performing a serial recovery directly from the website. The firmware update page also got a nice visual overhaul.\\n\\n<a href={WebsiteFull} target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n  <img src={WebsiteFull} alt=\\"ZSWatch website showing USB firmware update\\" />\\n</a>\\n\\n### Testability and power consumption\\nTo keep power consumption low while still allowing automated tests on the same firmware, USB stays enabled for ~20s after boot so CI can connect and run firmware\u2011update tests reliably.\\n\\nWe also enabled shell command support over BLE and USB, so the watch can be managed via the website Shell Console. Added shell commands to some random functions in ZSWatch, not very useful, but fun to play around with.\\n\\n<a href={WebsiteShell} target=\\"_blank\\" rel=\\"noopener noreferrer\\"><img src={WebsiteShell} alt=\\"Shell Console showing large shell output\\" /></a>\\n\\n### Production test build\\n\\nWe now have a dedicated [production test firmware](https://github.com/ZSWatch/ZSWatch/tree/main/production_test) that reuses much of the main firmware. This app is required for verifying hardware functions during production and will be used by Elecrow when assembling DKs (and likely future watches) to confirm that all components work correctly.\\n\\n<video controls src=\\"https://github.com/user-attachments/assets/92a09a1a-dd70-44a3-abb9-1259be6760ec\\" style={{width: \'100%\', maxHeight: \'420px\'}} />\\n### Watch housing update\\n\\nSimon, a mechanical engineer, has joined the project to help redesign the watch housing. This will give a much more streamlined and robust case, improving both aesthetics and durability. Nice!\\n\\n---\\n\\n### How XIP works on ZSWatch\\n\\nExecute\u2011in\u2011Place (XIP) lets the MCU run code directly from external flash over the QSPI interface. This gives us a lot more flash space for features, but it comes with two important considerations:\\n\\n- Power: Keeping QSPI and its cache active adds to idle current around 3\u20135 mA, which is a lot for a watch.\\n- Safety: Parts of the code (e.g., some of LVGL, mcumgr/USB, etc.) reside in XIP. This code must not be called while XIP is disabled or it will crash.\\n\\nSome of the things we do in ZSWatch to manage this:\\n- Some LVGL components are placed in external flash. We keep the most used parts and drawing code in internal flash since XIP is slower.\\n- App UI code is placed in the XIP area to save internal flash. App logic stays in internal flash so apps can continue running when the screen is off and XIP is disabled.\\n- XIP manager: A small manager arbitrates XIP enable/disable and provides a simple API so code that needs XIP can request it when needed. The API is ref\u2011counted and when the count hits 0, XIP is disabled, and vice versa.\\n- App visibility state: Apps are notified when their UI is visible/hidden so they don\u2019t call into LVGL (or other XIP code paths) when XIP is off.\\n- On\u2011demand features: `mcumgr` and USB live in the XIP area and are only enabled for updates.\\n\\nResult: Idle current drops from ~5 mA to ~500 \xb5A with the display off. When you open an app or start an update, XIP is enabled as needed and then turned off again when we return to an idle screen\u2011off state or when a firmware update finishes. Going forward we\u2019ll have to be more careful with what lives in XIP and only things that aren\u2019t needed while the screen is off.\\n\\n---\\n\\n### What\u2019s next\\n\\n- Continue power profiling, there\u2019s more to do.\\n- Validate the Dev Kit when received.\\n- Work has started on a completely reworked case for the upcoming ZSWatch.\\n- Start work on real watch PCB and HR PCB, we got design validated to it\'s \\"just\\" to route them.\\n\\n<br />\\n\\nWant to stay in the loop? Subscribe below for updates!\\n\\n<SubscriptionForm/>\\n\\n---"},{"id":"progress-devkit-prototype","metadata":{"permalink":"/blog/progress-devkit-prototype","source":"@site/blog/2025-07-30-devkit-prototype/index.md","title":"Development Kit Prototype","description":"We\u2019ve made great progress on the hardware front! Our new development kit is the next step toward a more refined ZSWatch, and it allows us to test key features before shrinking everything down to the final form factor.","date":"2025-07-30T00:00:00.000Z","tags":[{"inline":false,"label":"ZSWatch","permalink":"/blog/tags/zswatch","description":"ZSWatch core"}],"readingTime":3.255,"hasTruncateMarker":true,"authors":[{"name":"Jakob Krantz","title":"Senior Software Engineer and ZSWatch Creator and Maintainer","url":"https://jakobkrantz.se","page":{"permalink":"/blog/authors/jakkra"},"socials":{"github":"https://github.com/jakkra","linkedin":"https://www.linkedin.com/in/jakob-krantz-ba9a97127/"},"imageURL":"https://github.com/jakkra.png","key":"jakkra"},{"name":"Daniel Kampert","itle":"Senior Hardware Engineer and ZSWatch Maintainer","url":"https://github.com/Kampi","page":{"permalink":"/blog/authors/kampi"},"socials":{"github":"https://github.com/Kampi"},"imageURL":"https://github.com/Kampi.png","key":"kampi"}],"frontMatter":{"slug":"progress-devkit-prototype","title":"Development Kit Prototype","authors":["jakkra","kampi"],"tags":["zswatch"]},"unlisted":false,"prevItem":{"title":"Power consumption, HW update & Production test","permalink":"/blog/progress-hw-xip-usb-power"},"nextItem":{"title":"Health PCB and Firmware Update","permalink":"/blog/progress-hr-fota"}},"content":"import DockDk from \'./dk-dock.jpg\';\\nimport HrPCB from \'./ZSWatch-Dock-sch.png\';\\nimport DevkitPcb from \'./dk.jpg\';\\nimport DevkitRender from \'./dk-render.png\';\\nimport USBDrawing from \'./usb.drawio.png\';\\nimport USBSchematic from \'./dock-usb-sch.png\';\\nimport HRProgress from \'./hr_progress.png\';\\n\\nimport SubscriptionForm from \'@site/src/components/SubscriptionForm\';\\n\\nWe\u2019ve made great progress on the hardware front! Our new development kit is the next step toward a more refined ZSWatch, and it allows us to test key features before shrinking everything down to the final form factor.\\n\\nThis Devkit isn\u2019t just for internal testing, it\u2019s also for developers who want to get an early start building software for ZSWatch. It gives full access to all interfaces, and we\u2019ll be sharing more info soon on how to get one.\\n\\n<img src={DevkitPcb} alt=\\"ZSWatch Development Kit PCB\\" />\\n\\nLet\u2019s dive into the details....\\n\x3c!-- truncate --\x3e\\n\\n### ZSWatch Development Kit\\n\\nAs a first step in the next ZSWatch design, we created a Development Kit to try out all the new concepts before shrinking everything down to a compact PCB for the final watch.\\n\\nWe\u2019ve completed the prototype design and received the boards. We made a few mistakes, but nothing that couldn\u2019t be manually patched on the PCBs, including:\\n\\n- Misunderstood USB-C cable routing, so UART on the Dock was connected to SWD on the Devkit. Thankfully, this was easy to patch using the 0-ohm jumpers we had routed.\\n- The display LED driver didn\u2019t handle unused LED channels well (we only used 2 out of 4), so we\u2019ll switch back to the original driver, which is slightly larger but only has 2 channels\u2014perfect for our use case.\\n- 2-pin SMD headers were unstable and led to crooked soldering. We\u2019re switching to through-hole headers in the next revision for better alignment.\\n- Shrink it down a bit for cheaper PCBs.\\n\\nSome of the Devkit features:\\n- Each component has its own power header, allowing easy power consumption debugging using a current profiler in ampere mode.\\n- Breakout of pins going to the Health Tracking PCB.\\n- I\xb2S header for potential speaker support.\\n- USB-C connector for exposing ZSWatch signals.\\n\\nWe also tested UV printing from PCBWay and it looks pretty nice! We\'ll tune the colors a bit in the next version. UV printing adds only a few dollars per PCB, so we think it\'s worth keeping.\\n\\nEach feature is laid out in its own area to make the board easy to explore. Headers allow easy access for current measurements.\\n\\n<img src={DevkitRender} alt=\\"ZSWatch Devkit render with labeled components\\" />\\n\\n---\\n\\n### Devkit and Dock USB-C Interface\\n\\nOne of the biggest updates in this Devkit is the new USB-C interface, which replaces the hard-to-source magnetic connector we used previously.\\nThe final ZSWatch will have a waterproof USB-C connector that connects to a new \\"Dock\\". This connector utilizes the extra pins in USB 3 to expose SWD, UART, and RESET, in addition to standard USB functionality.\\n\\n<img src={DockDk} alt=\\"ZSWatch USB-C Dock prototype\\" />\\n:::tip\\nThe dock is fully optional for none development use.\\n:::\\n\\n#### Here\u2019s a high-level diagram of how it works\\n\\nThe dock is optional and is meant to make development and debugging easier.\\n\\n<img src={USBDrawing} alt=\\"USB-C signal breakout schematic\\" />\\n<br></br>\\n\\n<details>\\n  <summary>USB-C pin usage</summary>\\n  <img src={USBSchematic} alt=\\"ZSWatch Dock USB-C schematic\\" />\\n</details>\\n\\n---\\n\\n### Health tracking prototype\\n[Daniel] have made good progress in fixing up our initial driver for the MAX32664 Biometric Hub and now we get good readings from it. We will continue testing the performance. Read more about it [here in Daniels Linkedin post](https://www.linkedin.com/posts/daniel-kampert_zswatch-zswatch-zephyr-activity-7355485066313015297-EzP6)\\n\\nWe are also working in [upstreaming support for health data](https://github.com/zephyrproject-rtos/zephyr/pull/93484) and [our driver to Zephyr](https://github.com/zephyrproject-rtos/zephyr/pull/93674).\\n\\n<img src={HRProgress} alt=\\"ZSWatch Devkit render with labeled components\\" />\\n\\n\\n### Next up\\n\\n- Order next PCB revision with fixes\\n- Begin integration of health-tracking components\\n- Finalize UV print color tuning\\n- Start work on new ZSWatch hosuing and design the PCB accordinly\\n\\n<br />\\n\\n*Want to stay in the loop? Subscribe below for updates!*\\n\\n<SubscriptionForm/>\\n\\n[me]: https://github.com/jakkra\\n[Daniel]: https://github.com/kampi"},{"id":"progress-hr-fota","metadata":{"permalink":"/blog/progress-hr-fota","source":"@site/blog/2025-05-15-2-progress-hr-fota/index.md","title":"Health PCB and Firmware Update","description":"It\'s now been two months since our last update and a new one is very much due!","date":"2025-05-15T00:00:00.000Z","tags":[{"inline":false,"label":"ZSWatch","permalink":"/blog/tags/zswatch","description":"ZSWatch core"}],"readingTime":1.915,"hasTruncateMarker":true,"authors":[{"name":"Jakob Krantz","title":"Senior Software Engineer and ZSWatch Creator and Maintainer","url":"https://jakobkrantz.se","page":{"permalink":"/blog/authors/jakkra"},"socials":{"github":"https://github.com/jakkra","linkedin":"https://www.linkedin.com/in/jakob-krantz-ba9a97127/"},"imageURL":"https://github.com/jakkra.png","key":"jakkra"},{"name":"Daniel Kampert","itle":"Senior Hardware Engineer and ZSWatch Maintainer","url":"https://github.com/Kampi","page":{"permalink":"/blog/authors/kampi"},"socials":{"github":"https://github.com/Kampi"},"imageURL":"https://github.com/Kampi.png","key":"kampi"}],"frontMatter":{"slug":"progress-hr-fota","title":"Health PCB and Firmware Update","authors":["jakkra","kampi"],"tags":["zswatch"]},"unlisted":false,"prevItem":{"title":"Development Kit Prototype","permalink":"/blog/progress-devkit-prototype"},"nextItem":{"title":"Looking for feedback","permalink":"/blog/feedback"}},"content":"import FotaScreenshot from \'./fota.png\';\\nimport HrPCB from \'./hr.jpg\';\\nimport HrBLE from \'./hr_ble.jpg\';\\n\\nimport SubscriptionForm from \'@site/src/components/SubscriptionForm\';\\n\\nIt\'s now been two months since our last update and a new one is very much due!\\n\\nWe\u2019ve hit two major milestones:\\n- A prototype PCB for health tracking\\n- Firmware updates over USB and BLE\\n\\n<img src={HrPCB} />\\n\\nLet\u2019s dive into the details....\\n\x3c!-- truncate --\x3e\\n### Health Tracking Prototype\\nWe\u2019ve completed the design and assembly of a prototype board to validate the future health-tracking add-on PCB for ZSWatch. This board helps us test components, write drivers, and troubleshoot more easily before moving to a final compact version.\\n\\nTo simplify testing, we integrated an **nRF54L15 BLE MCU**, allowing the board to operate as a standalone unit.\\n\\nThe cool part? It can stream heart rate data live to the ZSWatch over Bluetooth! Below is a quick demo of heart rate data being plotted in real time. It\'s still very much a hacky prototype\u2014but it works.\\n\\n<img src={HrBLE} />\\n\\nCheck out the in-progress driver and app here:  \\n[https://github.com/ZSWatch/Zephyr-MAX32664C](https://github.com/ZSWatch/Zephyr-MAX32664C)\\n\\n### Firmware Updates via BLE and USB\\nWe\u2019ve added a bootloader, which means you can now update the ZSWatch firmware wirelessly via BLE\u2014or through USB (in case ZSWatch firmware breaks and Bluetooth isn\u2019t available.).\\n\\nEven better: you can update directly from the [Firmware Update page on zswatch.dev](https://zswatch.dev/update).  \\nFirmware artifacts are pulled from GitHub Actions automatically, making updates simple.\\n\\nWe also added support for uploading the full **filesystem image**, which contains most UI assets.\\n\\n<img src={FotaScreenshot} />\\n\\nImprovements for later:\\n- Ideally, only real known working releases should show\\n- Bundle firmware and filesystem into a single update process\\n\\nYou can also update the firmware using [nRF Connect Device Manager](https://www.nordicsemi.com/Products/Development-tools/nRF-Connect-Device-Manager) or other tools listed in the [Zephyr documentation](https://docs.zephyrproject.org/latest/services/device_mgmt/mcumgr.html#tools-libraries).\\n\\n\\n### Bonus (XIP)\\nAnother smaller, but very important update is that we after some fiddling around got **XIP (Execute-in-Place)** working on ZSWatch, allowing code to be run directly from the external flash. It was essential to fit the bootloader and USB support, and it opens up a lot more headroom for the firmware going forward.\\n\\n### Next up\\n- Evaluate the health tracking PCB\u2019s performance\\n- Design a casing for wearing the health tracking PCB in order \\n\\n<br></br>\\n\\n*Want to stay in the loop? Subscribe below for updates!*\\n<SubscriptionForm/>\\n\\n[me]: https://github.com/jakkra\\n[Daniel]: https://github.com/kampi"},{"id":"feedback","metadata":{"permalink":"/blog/feedback","source":"@site/blog/2025-03-19-feedback/index.md","title":"Looking for feedback","description":"We will be doing a redesign of much of the ZSWatch hardware. Before getting too deep into it we would like to collect some feedback and ideas.","date":"2025-03-19T00:00:00.000Z","tags":[{"inline":false,"label":"ZSWatch","permalink":"/blog/tags/zswatch","description":"ZSWatch core"},{"inline":false,"label":"feedback","permalink":"/blog/tags/feedback","description":"Everything related to use lookinf for feedback and ideas"}],"readingTime":0.325,"hasTruncateMarker":true,"authors":[{"name":"Jakob Krantz","title":"Senior Software Engineer and ZSWatch Creator and Maintainer","url":"https://jakobkrantz.se","page":{"permalink":"/blog/authors/jakkra"},"socials":{"github":"https://github.com/jakkra","linkedin":"https://www.linkedin.com/in/jakob-krantz-ba9a97127/"},"imageURL":"https://github.com/jakkra.png","key":"jakkra"}],"frontMatter":{"slug":"feedback","title":"Looking for feedback","authors":["jakkra"],"tags":["zswatch","feedback"]},"unlisted":false,"prevItem":{"title":"Health PCB and Firmware Update","permalink":"/blog/progress-hr-fota"},"nextItem":{"title":"We received funding!","permalink":"/blog/funding"}},"content":"import SubscriptionForm from \'@site/src/components/SubscriptionForm\';\\n\\nWe will be doing a redesign of much of the ZSWatch hardware. Before getting too deep into it we would like to collect some feedback and ideas.\\nPlease fill in the form below.\\n\\n\x3c!-- truncate --\x3e\\nIf the embedded form doesn\'t work for some reason you can fill it in [here too.](https://docs.google.com/forms/d/e/1FAIpQLSc5x3omDgfKNch9FyK3_1oTg-3tS38z_F2DC7QWCfxR-AVKDg/viewform?usp=sharing)\\n\\n<iframe src=\\"https://docs.google.com/forms/d/e/1FAIpQLSc5x3omDgfKNch9FyK3_1oTg-3tS38z_F2DC7QWCfxR-AVKDg/viewform?embedded=true\\" width=\\"100%\\" height=\\"1900\\" frameborder=\\"0\\" marginheight=\\"0\\" marginwidth=\\"0\\">L\xe4ser in\xa0\u2026</iframe>\\n\\n<SubscriptionForm/>"},{"id":"funding","metadata":{"permalink":"/blog/funding","source":"@site/blog/2025-03-14-funding/index.md","title":"We received funding!","description":"For the last few months there have not been much progress in ZSWatch. But that\'s about to change because we have received 50 000 \u20ac from the NLnet Foundation to take ZSWatch to the next level!","date":"2025-03-14T00:00:00.000Z","tags":[{"inline":false,"label":"ZSWatch","permalink":"/blog/tags/zswatch","description":"ZSWatch core"},{"inline":false,"label":"NLnet Foundation","permalink":"/blog/tags/nlnet","description":"Anything regarding NLnet Foundation"}],"readingTime":2.64,"hasTruncateMarker":true,"authors":[{"name":"Jakob Krantz","title":"Senior Software Engineer and ZSWatch Creator and Maintainer","url":"https://jakobkrantz.se","page":{"permalink":"/blog/authors/jakkra"},"socials":{"github":"https://github.com/jakkra","linkedin":"https://www.linkedin.com/in/jakob-krantz-ba9a97127/"},"imageURL":"https://github.com/jakkra.png","key":"jakkra"}],"frontMatter":{"slug":"funding","title":"We received funding!","authors":["jakkra"],"tags":["zswatch","nlnet"]},"unlisted":false,"prevItem":{"title":"Looking for feedback","permalink":"/blog/feedback"},"nextItem":{"title":"What is ZSWatch","permalink":"/blog/intro"}},"content":"import ZSWatchLogo from \'./ZSWatch_logo_with_text.png\';\\nimport NlnetLogo from \'./NGI0Core_tag.png\';\\nimport NGI0CoreLogo from \'./nlnet_banner.png\';\\nimport SubscriptionForm from \'@site/src/components/SubscriptionForm\';\\n\\n<p float=\\"left\\">\\n  <img src={ZSWatchLogo} width=\\"33%\\" />\\n  <img src={NlnetLogo} width=\\"33%\\" /> \\n  <img src={NGI0CoreLogo} width=\\"33%\\" />\\n</p>\\n\\nFor the last few months there have not been much progress in ZSWatch. **But** that\'s about to change because we have received 50 000 \u20ac from the [NLnet Foundation](https://nlnet.nl/project/ZSWatch/) to take ZSWatch to the next level!\\n\\n> [NGI0 Commons Fund](https://nlnet.nl/commonsfund), a fund established by [NLnet](https://nlnet.nl) with financial support from the European Commission\'s [Next Generation Internet](https://ngi.eu) program. Learn more at the [NLnet project page](https://nlnet.nl/project/ZSWatch).\\n\\n> We support organisations and people who contribute to an open internet for all. We fund projects that help fix the internet through open hardware, open software, open standards, open science and open data.\\n\\nWhich ZSWatch falls pretty well under.\\n\\nHere we go into more details about what this means.\\n\\n\x3c!-- truncate --\x3e\\n### How the funding will be used\\n\\nThe funding will allow [me] to work 50% and [Daniel] to work 20% on ZSWatch. The rest of the money will go to hardware and hardware prototyping costs. The funded project will run for 1 year.\\n\\nThe goal is to both rework and improve ZSWatch. Mainly to make it more accessible to a broader audience and grow the community. This will be done by making it cheaper, easier to assemble and use more accessible parts. Right now getting all parts and assembling a ZSWatch is not super easy, this we aim to change!\\n\\n**Our goal is within one year have a robust watch that is easy to assembly that you can easily get your hands on!**\\n\\n### High level plan\\nThere are so much more details defined, but including that would make this post very long. So here is the high level tasks we aim to finish.\\n:::tip Goals\\n    - Support daughter board interface attached to the main PCB.\\n        - This allows to keep core ZSWatch chaper.\\n        - Allows expandability.\\n        - Expand with any feature you need.\\n            - Health tracking (this we will do).\\n            - Additional sensors.\\n            - A GPS maybe?\\n            - Go crazy and add cellular maybe?\\n            - Unlimited possibilities.\\n    - New daughter board for health tracking.\\n        - This will be a optional PCB that connects to the main PCB.\\n        - Since HR algorithms are no easy task, we are planning to use [MAX32664(C) Biometric Snesor Hub with embedded algorithms](https://www.analog.com/en/products/max32664.html).\\n    - New main board.\\n        - Cheaper.\\n        - Optimize physical layout for improved mechanical assembly.\\n        - Changes to accomodate daughter boards.\\n    - Change of components on ZSWatch.\\n    - New simpler dock.\\n    - Case redesign.\\n    - Production test software.\\n    - Documentation using [Docusaurus](https://docusaurus.io/).\\n        - You are reading on it now!\\n        - We will host the blog and all documentation.\\n    - Improve software usability.\\n    - Lightwight app store.\\n        - We want to investigate [Zephyr LLEXT](https://docs.zephyrproject.org/latest/services/llext/index.html) to see if it\'s feasable to dynamically load applications to ZSWatch.\\n    - Testing.\\n        - We need more automated tests to easy catch regressions.\\n    - Phone integration improvements.\\n:::\\n\\nAlso we are looking for feedback, see the [Feedback Blog Post](../2025-03-19-feedback/index.md)\\n\\nWe will post updates of our progress so don\'t forget to sign up for our email list!\\n\\n<SubscriptionForm/>\\n\\n[me]: https://github.com/jakkra\\n[Daniel]: https://github.com/kampi"},{"id":"intro","metadata":{"permalink":"/blog/intro","source":"@site/blog/2025-03-13-zswatch-into/index.md","title":"What is ZSWatch","description":"If you have not heard of ZSWatch before, here is an intro!","date":"2025-03-13T00:00:00.000Z","tags":[{"inline":false,"label":"ZSWatch","permalink":"/blog/tags/zswatch","description":"ZSWatch core"},{"inline":false,"label":"intro","permalink":"/blog/tags/intro","description":"Everything related to intruduction of ZSWatch"}],"readingTime":2.425,"hasTruncateMarker":true,"authors":[{"name":"Jakob Krantz","title":"Senior Software Engineer and ZSWatch Creator and Maintainer","url":"https://jakobkrantz.se","page":{"permalink":"/blog/authors/jakkra"},"socials":{"github":"https://github.com/jakkra","linkedin":"https://www.linkedin.com/in/jakob-krantz-ba9a97127/"},"imageURL":"https://github.com/jakkra.png","key":"jakkra"}],"frontMatter":{"slug":"intro","title":"What is ZSWatch","authors":["jakkra"],"tags":["zswatch","intro"]},"unlisted":false,"prevItem":{"title":"We received funding!","permalink":"/blog/funding"}},"content":"If you have not heard of ZSWatch before, here is an intro!\\n\x3c!-- truncate --\x3e\\nimport SubscriptionForm from \'@site/src/components/SubscriptionForm\';\\nimport ReactPlayer from \'react-player\'\\nimport HardwareOverview from \'@site/static/img/Hardware_Overview_transparent.png\'\\n\\nimport StainlessWatchStand from \'@site/static/img/real_photos/stainless_stand.JPG\'\\nimport StainlessWatchFrontWide from \'@site/static/img/real_photos/stainless_front_wide.JPG\'\\nimport ClearWatchFrontWide from \'@site/static/img/real_photos/clear_front_wide.JPG\'\\n\\n\\nBuilt on the [Zephyr\u2122 Project](https://www.zephyrproject.org/) RTOS, hence the name **ZSWatch** - *Zephyr Smartwatch*.\\n\\nZSWatch is a free and open source smartwatch you can build almost from scratch - including software, hardware, and mechanics. Everything from the lowest level BLE radio driver code to PCB and casing is available and can be customised to suit your needs. \\n\\n<center>How ZSWatch looks like today.</center>\\n<img src={StainlessWatchFrontWide} />\\n<img src={ClearWatchFrontWide} />\\n<img src={StainlessWatchStand} /> \\n\\n<p></p>\\n\\n<center>Video walking through some of the UI and features.</center>\\n<ReactPlayer width=\\"100%\\" playing muted controls url=\'https://github.com/ZSWatch/ZSWatch/assets/4318648/ec1a94fd-a682-4559-9e68-f3e5bfcbe682\' />\\n\\n### Software\\nShort feature overview:\\n- Bluetooth LE communications with [GadgetBridge](https://codeberg.org/Freeyourgadget/Gadgetbridge) Android app.\\n- Multiple Watchfaces showing:\\n  - Standard stuff such as time, date, battery\\n  - Weather\\n  - Step count\\n  - Number of unread notifications\\n  - Environmental data\\n  - ...\\n- Pop-up notifications\\n- Application picker and app concept\\n  - Setting menu system, with easy extendability\\n  - Music control app\\n  - Settings app\\n  - Compass app\\n  - etc.\\n- Step counting\\n- Gestures\\n- iOS support (limited)\\n- And much more\\n...\\n\\n### Hardware\\nZSWatch is equipped with a range of powerful hardware components that make it a versatile and capable smartwatch.\\n\\n<img src={HardwareOverview} />\\n\\n<details>\\n    <summary>Components description</summary>\\n    - nRF5340 BLE chip ([u-blox NORA-B10 module](https://www.u-blox.com/en/product/nora-b1-series-open-cpu)): The watch is powered by a 128 MHz dual-core nRF5340 BLE chip, providing high-performance processing capabilities.\\n    \\n    - Nordic [nPM1300](https://docs.nordicsemi.com/category/npm1300-category) PMIC: The power management integrated circuit ensures efficient power delivery and battery life estimations.\\n\\n    - 240x240 round display: ZSWatch features a vibrant and responsive 240x240 round display with a capacitive touch screen, ensuring a smooth and intuitive user experience.\\n\\n    - IMU [Bosch BMI270](https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmi270-ds000.pdf): The integrated IMU allows for advanced features such as gesture-based navigation and smartwatch wake-up by arm movement.\\n\\n    - Bosch [BME688](https://www.bosch-sensortec.com/products/environmental-sensors/gas-sensors/bme688/) Environmental sensor: The BME688 sensor provides AI-enhanced environmental data, enabling the watch to monitor air quality and other environmental parameters.\\n\\n    - Bosch [BMP581](https://www.bosch-sensortec.com/products/environmental-sensors/pressure-sensors/bmp581/) High-performance pressure sensor: The BMP581 sensor offers accurate pressure measurements with a precision of approximately 20cm.\\n\\n    - ST [LIS2MDLTR](https://www.st.com/resource/en/datasheet/lis2mdl.pdf) Magnetometer: The magnetometer enables the watch to detect magnetic fields, opening up possibilities for compass and navigation applications.\\n\\n    - Macronix [MX25U51245GZ4I00](https://www.mouser.de/datasheet/2/819/MX25U51245G_2c_1_8V_2c_512Mb_2c_v1_4-3371129.pdf) 64 MB external flash: The external flash provides large storage space for data and UI resources.\\n\\n    - Broadcom [APDS-9306-065](https://docs.broadcom.com/docs/AV02-4755EN) Light Sensor: The light sensor enables automatic brightness control.\\n\\n    - Micro Crystal [RV-8263-C8](https://www.microcrystal.com/en/products/real-time-clock-rtc-modules/rv-8263-c8) RTC: The real-time clock module ensures accurate timekeeping and supports alarm functions.\\n\\n    - Knowles [SPK0641HT4H-1](https://www.knowles.com/docs/default-source/model-downloads/spk0641ht4h-1-rev-a.pdf) I2S microphone: The built-in microphone allows for audio recording and voice control capabilities.\\n\\n\\n    Option to not mount sensors: ZSWatch offers the flexibility to exclude certain sensors, allowing for cost optimization based on specific requirements.\\n\\n    This powerful combination of hardware components ensures that ZSWatch delivers a rich and immersive smartwatch experience.\\n</details>\\n\\n<SubscriptionForm/>"}]}}')}}]);
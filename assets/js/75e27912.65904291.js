"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3395],{1037:e=>{e.exports=JSON.parse('{"permalink":"/blog/progress-xip-usb-ble-update","source":"@site/blog/2025-10-10-progress-hw-xip-usb-power/index.md","title":"Power conusumption & HW update","description":"As usual a lot has landed since our last update, but much of it hasn\u2019t been very visual, so the blog has been quiet. On hardware, we focused on revision two of the Devkit and the heart\u2011rate test PCB. On software, we optimized power (especially reducing XIP power draw), improved firmware updates over BLE and USB (WebSerial), and added a couple of apps. Below is a quick tour, plus a short technical deep\u2011dive on how XIP works on ZSWatch and why it matters for battery life.","date":"2025-10-10T00:00:00.000Z","tags":[{"inline":false,"label":"ZSWatch","permalink":"/blog/tags/zswatch","description":"ZSWatch core"}],"readingTime":5.55,"hasTruncateMarker":true,"authors":[{"name":"Jakob Krantz","title":"Senior Software Engineer and ZSWatch Creator and Maintainer","url":"https://jakobkrantz.se","page":{"permalink":"/blog/authors/jakkra"},"socials":{"github":"https://github.com/jakkra","linkedin":"https://www.linkedin.com/in/jakob-krantz-ba9a97127/"},"imageURL":"https://github.com/jakkra.png","key":"jakkra"}],"frontMatter":{"slug":"progress-xip-usb-ble-update","title":"Power conusumption & HW update","authors":["jakkra"],"tags":["zswatch"]},"unlisted":false,"nextItem":{"title":"Development Kit Prototype","permalink":"/blog/progress-devkit-prototype"}}')},2282:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/website_usb_shell-e815bcbafac52569b6548ace51ca2c83.png"},2487:(e,t,a)=>{a.d(t,{A:()=>i});const n={signup:"signup_Jd1d",center:"center_lsS9",signupTitle:"signupTitle_Ta4P",emailInput:"emailInput_uoO2",subscribeBtn:"subscribeBtn_r9gI",blogReminder:"blogReminder_Sf3u"};var s=a(4848);function i(){return(0,s.jsx)("form",{method:"post",action:"https://zswatch.pikapod.net/subscription/form",className:n.signup,children:(0,s.jsxs)("div",{className:n.center,children:[(0,s.jsx)("div",{className:n.signupTitle,children:"Sign up for updates here"}),(0,s.jsx)("input",{type:"hidden",name:"nonce"}),(0,s.jsxs)("div",{children:[(0,s.jsx)("input",{type:"email",name:"email",required:!0,placeholder:"Enter your email",className:n.emailInput}),(0,s.jsx)("input",{type:"submit",value:"Subscribe",className:n.subscribeBtn})]}),(0,s.jsx)("a",{href:"/blog",className:n.blogReminder,children:"Read the blog for latest info"}),(0,s.jsxs)("p",{hidden:!0,children:[(0,s.jsx)("input",{id:"2cca0",type:"checkbox",name:"l",defaultChecked:!0,value:"2cca0c50-ef0d-4339-b695-9e559f4a4359"}),(0,s.jsx)("label",{htmlFor:"2cca0",children:"ZSWatch Test List"}),(0,s.jsx)("br",{})]})]})})}},3046:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/hr_v2_dk-6dd37889027a3847c22ecfe484eb48fa.png"},5028:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/dk-1-2-render-8fb8ffa0dca1acc6c226f8a5fa3d0976.png"},8453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>l});var n=a(6540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},9715:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>h,metadata:()=>n,toc:()=>u});var n=a(1037),s=a(4848),i=a(8453),r=a(2487),l=a(2282),o=a(5028),d=a(3046);const h={slug:"progress-xip-usb-ble-update",title:"Power conusumption & HW update",authors:["jakkra"],tags:["zswatch"]},c=void 0,p={authorsImageUrls:[void 0]},u=[{value:"DevKit v2 ordered (likely final version)",id:"devkit-v2-ordered-likely-final-version",level:3},{value:"Heart Rate board v2",id:"heart-rate-board-v2",level:3},{value:"XIP management and App UI state",id:"xip-management-and-app-ui-state",level:3},{value:"Firmware updates over BLE and USB",id:"firmware-updates-over-ble-and-usb",level:3},{value:"Testability and power consumption",id:"testability-and-power-consumption",level:3},{value:"Production test build",id:"production-test-build",level:3},{value:"How XIP works on ZSWatch (and why we toggle it)",id:"how-xip-works-on-zswatch-and-why-we-toggle-it",level:3},{value:"What\u2019s next",id:"whats-next",level:3},{value:"Pull requests",id:"pull-requests",level:3}];function m(e){const t={a:"a",code:"code",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"As usual a lot has landed since our last update, but much of it hasn\u2019t been very visual, so the blog has been quiet. On hardware, we focused on revision two of the Devkit and the heart\u2011rate test PCB. On software, we optimized power (especially reducing XIP power draw), improved firmware updates over BLE and USB (WebSerial), and added a couple of apps. Below is a quick tour, plus a short technical deep\u2011dive on how XIP works on ZSWatch and why it matters for battery life."}),"\n",(0,s.jsx)(t.p,{children:"Let\u2019s dive into the details..."}),"\n",(0,s.jsx)(t.h3,{id:"devkit-v2-ordered-likely-final-version",children:"DevKit v2 ordered (likely final version)"}),"\n",(0,s.jsxs)(t.p,{children:["Last week we ordered what we believe is the final iteration of the ZSWatch Devkit (#2). We expect to receive it in about three weeks. As a trial for fulfillment, we plan to sell a limited quantity through Elecrow: ",(0,s.jsx)(t.a,{href:"https://www.elecrow.com",children:"https://www.elecrow.com"}),". We\u2019ll set up a shop there shortly. Make sure to sign up on the email list to not miss it!"]}),"\n",(0,s.jsx)("a",{href:o.A,target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)("img",{src:o.A,alt:"ZSWatch Devkit v1.2 render"})}),"\n",(0,s.jsx)(t.h3,{id:"heart-rate-board-v2",children:"Heart Rate board v2"}),"\n",(0,s.jsxs)(t.p,{children:["We also received version 2 of the heart\u2011rate test board, and it\u2019s working well. Compared to the v1 prototype from the earlier post (",(0,s.jsx)(t.a,{href:"/blog/progress-hr-fota",children:"Health PCB and Firmware Update"}),"), v2 includes bug fixes and a simplified optical front\u2011end:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://look.ams-osram.com/m/1a73f8d425cfcc40/original/SFH-7016.pdf",children:"Single LED module: OSRAM SFH 7016 (Red, Green, IR)"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://www.vishay.com/docs/80381/vemd8082.pdf",children:"Two photodiodes: Vishay VEMD8082"})}),"\n"]}),"\n",(0,s.jsx)("a",{href:d.A,target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)("img",{src:d.A,alt:"Heart\u2011Rate test board v2 on Devkit"})}),"\n",(0,s.jsx)(t.h3,{id:"xip-management-and-app-ui-state",children:"XIP management and App UI state"}),"\n",(0,s.jsx)(t.p,{children:"We introduced an XIP manager and refined app state handling to safely disable XIP when the screen is off. This reduces baseline current consumption while ensuring apps and UI code don\u2019t crash when XIP is unavailable."}),"\n",(0,s.jsx)(t.p,{children:"Changes included:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Keep app UI code in external flash, but keep app logic in internal flash so it can run while XIP is off."}),"\n",(0,s.jsx)(t.li,{children:"Add an app \u201cvisible/hidden\u201d state so UI updates don\u2019t run when XIP is disabled."}),"\n",(0,s.jsxs)(t.li,{children:["Careful walkthrough of what can live in external flash and what can\u2019t:","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Since we disable XIP when the screen is off, background code can\u2019t live in external flash anymore."}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"mcumgr"})," and USB live in XIP as they\u2019re only needed during updates; we explicitly enable them when performing updates in the ",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/blob/main/app/src/applications/update/update_app.c",children:"update app"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["For apps where the UI code is placed in QSPI flash with XIP, apps now need to guard like ",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/blob/e3052acf96fc31c813b4050af3b9a3d32d527b26/app/src/applications/stopwatch/stopwatch_app.c#L158",children:"this"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-c",children:"static void update_elapsed_time(void)\n{\n  if (stopwatch_data.state == STOPWATCH_STATE_RUNNING) {\n      uint64_t current_time = k_uptime_get();\n      stopwatch_data.elapsed_ms = (uint32_t)(current_time - stopwatch_data.start_time_ms);\n      \n      // Only update UI if XIP is enabled and UI is visible\n      if (app.current_state == ZSW_APP_STATE_UI_VISIBLE) {\n          stopwatch_ui_update_time(stopwatch_data.elapsed_ms);\n      }\n  }\n}\n"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"FFT Spectrum visualizer with an emulated mic driver for the Linux/native build (handy for quick dev and testing)."}),"\n",(0,s.jsx)("video",{controls:!0,src:"https://github.com/user-attachments/assets/73f3b879-9343-4f80-ae69-938d120bc3fd",style:{width:"100%",maxHeight:"420px"}}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Calculator app based on ",(0,s.jsx)(t.a,{href:"https://github.com/zephyrproject-rtos/zephyr/tree/main/samples/subsys/smf/smf_calculator",children:"Zephyr\u2019s SMF sample"}),"."]}),"\n",(0,s.jsx)("a",{href:"https://github.com/user-attachments/assets/841fbd2e-b997-4f68-b037-094cb0d60fca",target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)("img",{src:"https://github.com/user-attachments/assets/841fbd2e-b997-4f68-b037-094cb0d60fca",alt:"Calculator app on ZSWatch",style:{maxWidth:"320px",width:"100%"}})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"firmware-updates-over-ble-and-usb",children:"Firmware updates over BLE and USB"}),"\n",(0,s.jsx)(t.p,{children:"We now support firmware updates over USB (in addition to BLE) using the browser\u2019s WebSerial API. This means you can recover a watch that\u2019s stuck or has broken firmware by entering MCUBoot and performing a serial recovery directly from the website."}),"\n",(0,s.jsx)(t.h3,{id:"testability-and-power-consumption",children:"Testability and power consumption"}),"\n",(0,s.jsx)(t.p,{children:"To keep power low while still allowing automated tests on the same firmware, USB stays enabled for ~20s after boot so CI can connect and run firmware\u2011update tests reliably."}),"\n",(0,s.jsx)(t.p,{children:"We also enabled shell command support over BLE and USB, so the watch can be managed via the website Shell Console."}),"\n",(0,s.jsx)("a",{href:l.A,target:"_blank",rel:"noopener noreferrer",children:(0,s.jsx)("img",{src:l.A,alt:"Shell Console showing large shell output"})}),"\n",(0,s.jsx)(t.h3,{id:"production-test-build",children:"Production test build"}),"\n",(0,s.jsxs)(t.p,{children:["We now have a dedicated ",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/tree/main/production_test",children:"production test firmware"})," that reuses much of the main firmware. This app is required for verifying hardware functions during production and will be used by Elecrow when assembling DKs (and likely future watches) to confirm that all components work correctly."]}),"\n",(0,s.jsx)("video",{controls:!0,src:"https://github.com/user-attachments/assets/92a09a1a-dd70-44a3-abb9-1259be6760ec",style:{width:"100%",maxHeight:"420px"}}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"how-xip-works-on-zswatch-and-why-we-toggle-it",children:"How XIP works on ZSWatch (and why we toggle it)"}),"\n",(0,s.jsx)(t.p,{children:"Execute\u2011in\u2011Place (XIP) lets the MCU run code directly from external flash over the QSPI interface. This gives us a lot more flash space for features, but it comes with two important considerations:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Power: Keeping QSPI and its cache active adds to idle current \u2014 around 3\u20135 mA, which is a lot for a watch."}),"\n",(0,s.jsx)(t.li,{children:"Safety: Parts of the code (e.g., some of LVGL, mcumgr/USB, etc.) reside in XIP. This code must not be called while XIP is disabled or it will crash."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Some of the things we do in ZSWatch:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Some LVGL components are placed in external flash. We keep the most used parts and drawing code in internal flash since XIP is slower."}),"\n",(0,s.jsx)(t.li,{children:"App UI code is placed in the XIP area to save internal flash. App logic stays in internal flash so apps can continue running when the screen is off and XIP is disabled."}),"\n",(0,s.jsx)(t.li,{children:"XIP manager: A small manager arbitrates XIP enable/disable and provides a simple API so code that needs XIP can request it when needed. The API is ref\u2011counted \u2014 when the count hits 0, XIP is disabled, and vice versa."}),"\n",(0,s.jsx)(t.li,{children:"App visibility state: Apps are notified when their UI is visible/hidden so they don\u2019t call into LVGL (or other XIP code paths) when XIP is off."}),"\n",(0,s.jsxs)(t.li,{children:["On\u2011demand features: ",(0,s.jsx)(t.code,{children:"mcumgr"})," and USB live in the XIP area and are only enabled for updates."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Result: Idle current drops from ~5 mA to ~500 \xb5A with the display off. When you open an app or start an update, XIP is enabled as needed and then turned off again when we return to an idle screen\u2011off state or when a firmware update finishes. Going forward we\u2019ll be more careful with what lives in XIP \u2014 only things that aren\u2019t needed while the screen is off."}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"whats-next",children:"What\u2019s next"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Continue power profiling \u2014 there\u2019s more to do."}),"\n",(0,s.jsx)(t.li,{children:"Validate the Dev Kit when received."}),"\n",(0,s.jsx)(t.li,{children:"Work has started on a completely reworked case for the upcoming ZSWatch."}),"\n"]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(t.p,{children:"Want to stay in the loop? Subscribe below for updates!"}),"\n",(0,s.jsx)(r.A,{}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h3,{id:"pull-requests",children:"Pull requests"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/pull/457",children:"https://github.com/ZSWatch/ZSWatch/pull/457"})," - USB manager, BLE/USB update tests, shell console on website\n",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/pull/455",children:"https://github.com/ZSWatch/ZSWatch/pull/455"})," - WebSerial (USB) firmware update support on website\n",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/pull/453",children:"https://github.com/ZSWatch/ZSWatch/pull/453"})," - XIP manager and app UI state for power optimization\n",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/pull/451",children:"https://github.com/ZSWatch/ZSWatch/pull/451"})," - New Calculator app based on Zephyr SMF sample\n",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/pull/447",children:"https://github.com/ZSWatch/ZSWatch/pull/447"})," - Separate production test app (hardware + native)\n",(0,s.jsx)(t.a,{href:"https://github.com/ZSWatch/ZSWatch/pull/441",children:"https://github.com/ZSWatch/ZSWatch/pull/441"})," - FFT Spectrum app and emulated mic driver for native build"]})]})}function f(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);
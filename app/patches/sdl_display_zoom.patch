diff --git a/drivers/display/Kconfig.sdl b/drivers/display/Kconfig.sdl
index a06b143f31..5bf18115a3 100644
--- a/drivers/display/Kconfig.sdl
+++ b/drivers/display/Kconfig.sdl
@@ -39,4 +39,11 @@ choice SDL_DISPLAY_DEFAULT_PIXEL_FORMAT
 
 endchoice
 
+config SDL_DISPLAY_ZOOM_PCT
+	int "Default zoom percentage"
+	default 100
+	range 10 10000
+	help
+	  SDL window zoom percentage to adjust readability on small screens
+
 endif # SDL_DISPLAY
diff --git a/drivers/display/display_sdl.c b/drivers/display/display_sdl.c
index f7ada84fbe..14ad097ae1 100644
--- a/drivers/display/display_sdl.c
+++ b/drivers/display/display_sdl.c
@@ -13,11 +13,14 @@
 #include <soc.h>
 #include <zephyr/sys/byteorder.h>
 #include "display_sdl_bottom.h"
+#include "cmdline.h"
 
 #define LOG_LEVEL CONFIG_DISPLAY_LOG_LEVEL
 #include <zephyr/logging/log.h>
 LOG_MODULE_REGISTER(display_sdl);
 
+static uint32_t sdl_display_zoom_pct;
+
 struct sdl_display_config {
 	uint16_t height;
 	uint16_t width;
@@ -54,8 +57,14 @@ static int sdl_display_init(const struct device *dev)
 #endif /* SDL_DISPLAY_DEFAULT_PIXEL_FORMAT */
 		;
 
-	int rc = sdl_display_init_bottom(config->height, config->width, &disp_data->window,
-					 &disp_data->renderer, &disp_data->texture);
+	if (sdl_display_zoom_pct == UINT32_MAX) {
+		sdl_display_zoom_pct = CONFIG_SDL_DISPLAY_ZOOM_PCT;
+	}
+
+	int rc = sdl_display_init_bottom(config->height, config->width,
+					 sdl_display_zoom_pct,
+					 &disp_data->window, &disp_data->renderer,
+					 &disp_data->texture);
 
 	if (rc != 0) {
 		LOG_ERR("Failed to create SDL display");
@@ -386,3 +395,22 @@ static const struct display_driver_api sdl_display_api = {
 	NATIVE_TASK(sdl_display_cleanup_##n, ON_EXIT, 1);
 
 DT_INST_FOREACH_STATUS_OKAY(DISPLAY_SDL_DEFINE)
+
+static void display_sdl_native_posix_options(void)
+{
+	static struct args_struct_t sdl_display_options[] = {
+		{ .option = "display_zoom_pct",
+		  .name = "pct",
+		  .type = 'u',
+		  .dest = (void *)&sdl_display_zoom_pct,
+		  .descript = "Display zoom percentage (100 == 1:1 scale), "
+			      "by default " STRINGIFY(CONFIG_SDL_DISPLAY_ZOOM_PCT)
+			      " = CONFIG_SDL_DISPLAY_ZOOM_PCT"
+		},
+		ARG_TABLE_ENDMARKER
+	};
+
+	native_add_command_line_opts(sdl_display_options);
+}
+
+NATIVE_TASK(display_sdl_native_posix_options, PRE_BOOT_1, 1);
diff --git a/drivers/display/display_sdl_bottom.c b/drivers/display/display_sdl_bottom.c
index a7ad1929f4..92c09f36fc 100644
--- a/drivers/display/display_sdl_bottom.c
+++ b/drivers/display/display_sdl_bottom.c
@@ -11,12 +11,12 @@
 #include <SDL.h>
 #include "nsi_tracing.h"
 
-int sdl_display_init_bottom(uint16_t height, uint16_t width,
+int sdl_display_init_bottom(uint16_t height, uint16_t width, uint16_t zoom_pct,
 			    void **window, void **renderer, void **texture)
 {
 	*window = SDL_CreateWindow("Zephyr Display", SDL_WINDOWPOS_UNDEFINED,
-				   SDL_WINDOWPOS_UNDEFINED, width,
-				   height, SDL_WINDOW_SHOWN);
+				   SDL_WINDOWPOS_UNDEFINED, width * zoom_pct / 100,
+				   height * zoom_pct / 100, SDL_WINDOW_SHOWN);
 	if (*window == NULL) {
 		nsi_print_warning("Failed to create SDL window: %s", SDL_GetError());
 		return -1;
diff --git a/drivers/display/display_sdl_bottom.h b/drivers/display/display_sdl_bottom.h
index 91ea890c13..d60c8b15f4 100644
--- a/drivers/display/display_sdl_bottom.h
+++ b/drivers/display/display_sdl_bottom.h
@@ -20,7 +20,7 @@ extern "C" {
 
 /* Note: None of these functions are public interfaces. But internal to the SDL display driver */
 
-int sdl_display_init_bottom(uint16_t height, uint16_t width,
+int sdl_display_init_bottom(uint16_t height, uint16_t width, uint16_t zoom_pct,
 			    void **window, void **renderer, void **texture);
 void sdl_display_write_bottom(const uint16_t height, const uint16_t width,
 			      const uint16_t x, const uint16_t y,
